import os

env = Environment(ENV = {'PATH' : os.environ['PATH']})

env['APP_TARGET'] = 'OpenALTest'
env['APP_SOURCES'] = ['OpenALTest.cpp']
env['ASSETS'] = ['buzzer.ogg']
env['DEBUG'] = 0

# ----------

env.Append(FRAMEWORKS = ['OpenAL'])
env.Append(APP_SOURCES = ['OpenAlAudio.cpp'])

# libvorbis config with pkg-config
def CheckPKGConfig(context, version):
	context.Message( 'Checking for pkg-config... ' )
	ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
	context.Result(ret)
	return ret

def CheckPKG(context, name):
	context.Message('Checking for %s... ' % name)
	ret = context.TryAction("pkg-config --exists '%s'" % name)[0]
	context.Result(ret)
	return ret

if (not GetOption('clean')):
    conf = env.Configure(custom_tests = { 'CheckPKGConfig' : CheckPKGConfig,
                                          'CheckPKG' : CheckPKG })
    if not conf.CheckPKGConfig('0.15'):
        print 'ERROR: pkg-config not found.'
        Exit(1)

    LIBS = ['vorbis', 'vorbisfile']

    for lib in LIBS:
        if not conf.CheckPKG(lib):
            print "ERROR: '%s' must be installed!" % (lib)
            Exit(1)
        else:
            env.ParseConfig('pkg-config --cflags --libs %s' % (lib))

    env = conf.Finish()

# -------

SConscript('../../../../../scons/SConscript', exports = 'env')

